garch_gjr_df = data.frame(
w3 = estimates3["omega"],
a3 = estimates3["alpha1"],
b3 = estimates3["beta1"],
g3 = estimates3["gamma1"],
p1 = p_values3["omega"],
p2 = p_values3["alpha1"],
p3 = p_values3["beta1"],
p4 = p_values3["gamma1"]
)
write_latex("../results/results.tex", garch_gjr_df, append = TRUE, section_title = "GJR-GARCH(1,1) with zt ~ N(0,1)")
garch_gjr_t_df = data.frame(
w4 = estimates4["omega"],
a4 = estimates4["alpha1"],
b4 = estimates4["beta1"],
g4 = estimates4["gamma1"],
v4 = estimates4["shape"],
p1 = p_values4["omega"],
p2 = p_values4["alpha1"],
p3 = p_values4["beta1"],
p4 = p_values4["gamma1"],
p5 = p_values4["shape"]
)
write_latex("../results/results.tex", garch_gjr_t_df, append = TRUE, section_title = "GJR-GARCH(1,1) with zt ~ tv")
# c)  plotting NIC ----
# For GARCH(1,1) with zt ~ N(0,1)
w1 = estimates1["omega"]
a1 = estimates1["alpha1"]
b1 = estimates1["beta1"]
# For GARCH(1,1) with zt ~ tv
w2 = estimates2["omega"]
a2 = estimates2["alpha1"]
b1 = estimates2["beta1"]
v = estimates2["shape"]
# For GJR-GARCH(1,1) with zt ~ N(0,1)
w3 = estimates3["omega"]
a3 = estimates3["alpha1"]
b3 = estimates3["beta1"]
g3 = estimates3["gamma1"]
# For GJR-GARCH(1,1) with zt ~ tv
w4 = estimates4["omega"]
a4 = estimates4["alpha1"]
b4 = estimates4["beta1"]
g4 = estimates4["gamma1"]
v4 = estimates4["shape"]
# Unconditional variance from the first GARCH(1,1) model
ve1 = w1 / (1 - a1 - b1)
# NIC from tutorial ----
T = 500
e = seq(-5, 5, length.out = T)  # Grid of shocks epsilon
nicG1 = nicG2 = nicGJR1 = nicGJR2 = rep(0, T)  # Initialize NIC for each model
# Calculate NIC for each model
for (t in 1:T) {
nicG1[t] = w1 + b1 * ve1 + a1 * e[t]^2  # GARCH(1,1) with zt ~ N(0,1)
nicG2[t] = w2 + b1 * ve1 + a2 * e[t]^2  # GARCH(1,1) with zt ~ tv
if (e[t] > 0) {
nicGJR1[t] = w3 + b3 * ve1 + a3 * e[t]^2 # GJR-GARCH(1,1) with zt ~ N(0,1)
nicGJR2[t] = w4 + b4 * ve1 + a4 * e[t]^2 # GJR-GARCH(1,1) with zt ~ tv
}
else{
nicGJR1[t] = w3 + b3 * ve1 + (a3 + g3) * e[t]^2 # GJR-GARCH(1,1) with zt ~ N(0,1)
nicGJR2[t] = w4 + b4 * ve1 + (a4 + g4) * e[t]^2 # GJR-GARCH(1,1) with zt ~ tv
}
}
# Plot NIC for all four models
# Open a PNG device to save the News Impact Curve
png(paste0(figures_path, "News_Impact_Curve.png"))
par(mfrow = c(1, 1))
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
lines(e, nicG2, type = "l", col = "red", lwd = 2, lty = 2)
lines(e, nicGJR1, type = "l", col = "green", lwd = 2, lty = 3)
lines(e, nicGJR2, type = "l", col = "purple", lwd = 2, lty = 4)
legend("top", legend = c("GARCH N(0,1)", "GARCH t_v", "GJR-GARCH N(0,1)", "GJR-GARCH t_v"), col = c("blue", "red", "green", "purple"), lty = 1:4, ncol = 1, lwd = 2)
# Close the plotting device
dev.off()
par(mfrow = c(1, 1))
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
lines(e, nicG2, type = "l", col = "red", lwd = 2, lty = 2)
# Plot NIC for all four models
# Open a PNG device to save the News Impact Curve
png(paste0(figures_path, "News_Impact_Curve.png"))
par(mfrow = c(1, 1))
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
# Plot NIC for all four models
par(mfrow = c(1, 1))
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
lines(e, nicG2, type = "l", col = "red", lwd = 2, lty = 2)
lines(e, nicGJR1, type = "l", col = "green", lwd = 2, lty = 3)
lines(e, nicGJR2, type = "l", col = "purple", lwd = 2, lty = 4)
dev.control(display = "enable")
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
nicGJR2
nicGJR1
nicG2
nicG1
# ==============================================================================
# FInancaial Economitrics Coursework
# ==============================================================================
#
# Author: 10710007
# Version: 13-03-2024
#
# ==============================================================================
rm(list = ls())
# Packages
library(lubridate)
library(forecast)
library(rugarch)
# Data
setwd("/home/oddish3/Documents/R_folder/MSc/FE/FE-coursework/code")
data = read.csv("../data/group_11.csv")
source("fineco_fun.R")
source("../utils/latex-macro.R")
figures_path <- "../docs/figures/"
# Script
# ==============================================================================
data$date = as.Date(data$date)
# plot(data$log.return, type = "l", col = "darkgreen")
# abline(h = 0, v = 250, col = "red")
# dev.off()
# ------------------------------------------
#           Practical Exercise
# ------------------------------------------
# Use the first 250 observations as an in-sample (estimation) period and the last 250 observations as out of sample forecasting
in_sample = as.matrix(data[1:250, 2])
out_sample = as.matrix(data[(251:nrow(data)), 2])
# a) investigating statistical properties of the in-sample data ----
# i) descriptive stats
a1_results = dstats(in_sample)
# ii-v) moment tests
a2_results = test_moment(in_sample)
# Assemble data for moments and test statistics into a dataframe
moment_test_df = data.frame(
# descriptive stats
a1mu = a1_results[1,1],
a1sigma = a1_results[2,1],
a1skew = a1_results[3,1],
a1kurt = a1_results[4,1],
# t stats
a21t = a2_results[1,1],
a22t = a2_results[2,1],
a23t = a2_results[3,1],
a24t = a2_results[4,1],
# p vals
a31p = a2_results[1,2],
a32p = a2_results[2,2],
a33p = a2_results[3,2],
a34p = a2_results[4,2]
)
# Appending the second section with its title
write_latex("../results/results.tex", moment_test_df, decimal_precision = 2, append = FALSE, section_title = "Moment Test and Descriptive Statistics")
# vi) lbq test
lbq1 = Box.test(in_sample, lag = 21, type = "Ljung-Box", fitdf = 0)
lbq2 = Box.test(in_sample^2, lag = 21, type = "Ljung-Box", fitdf = 0) # fitdf is the number of parameters estimated ???
lbq_df = data.frame(
b11 = lbq1$statistic,
b12 = lbq1$p.value,
b21 = lbq2$statistic,
b22 = lbq2$p.value
)
# Writing the first section with its title
write_latex("../results/results.tex", lbq_df, decimal_precision = 2, append = TRUE, section_title = "Ljung-Box Test Results")
# vii) Plot SACF and SPACF
# Open a PNG device for ACF and PACF plots
png(paste0(figures_path, "PACF.png"))
# Setting the plotting area to accommodate two plots side by side
par(mfrow = c(1, 2))
# Generate ACF and PACF plots
Acf(in_sample, lag.max = 25)
Pacf(in_sample, lag.max = 25)
# Close the plotting device for ACF/PACF
dev.off()
# Reset par settings to default for subsequent plots
par(mfrow = c(1, 1))
# Now, generate and save another plot separately if needed
png(paste0(figures_path, "log_return_plot.png"))
plot(data$log.return, type = "l", col = "darkgreen")
dev.off()
# b) estimating the conditional variance ----
# Assume that the conditional mean of the return series is constant: rt = c + εt , εt = σt zt . Define
#the residual series as et = rt − ĉ. Use the et series to estimate the following conditional variance
# i) GARCH(1,1) with zt ~ N(0,1)
spec1 =  ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE) ,distribution.model = "norm")
fit1 = ugarchfit(spec = spec1, data = data$log.return)
estimates1 = fit1@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values1 = fit1@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
# GARCH(1,1) with zt ~ tv
spec2 = ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "std")  # 'std' for Student's t-distribution
fit2 = ugarchfit(spec = spec2, data = data$log.return)
estimates2 = fit2@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values2 = fit2@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
# ii) GJR-GARCH (1, 1) with zt ~ N(0,1)
spec3 = ugarchspec(
variance.model = list(model = "gjrGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm" # Standard normal distribution for innovations
)
fit3 = ugarchfit(spec = spec3, data = data$log.return)
estimates3 = fit3@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values3 = fit3@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
# GJR-MODEL (1, 1) with zt ~ tv
spec4 = ugarchspec(
variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "std"  # 'std' for Student's t-distribution
)
fit4 = ugarchfit(spec = spec4, data = data$log.return)
estimates4 = fit4@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values4 = fit4@fit$robust.matcoef[,4]
garch11_df = data.frame(
w1 = estimates1["omega"],
a1 = estimates1["alpha1"],
b1 = estimates1["beta1"],
p1 = p_values1["omega"],
p2 = p_values1["alpha1"],
p3 = p_values1["beta1"]
)
write_latex("../results/results.tex", garch11_df, append = TRUE, section_title = "GARCH(1,1) with zt ~ N(0,1)")
garch11_t_df = data.frame(
w2 = estimates2["omega"],
a2 = estimates2["alpha1"],
b2 = estimates2["beta1"],
v = estimates2["shape"],
p1 = p_values2["omega"],
p2 = p_values2["alpha1"],
p3 = p_values2["beta1"],
p4 = p_values2["shape"]
)
write_latex("../results/results.tex", garch11_t_df, append = TRUE, section_title = "GARCH(1,1) with zt ~ tv")
garch_gjr_df = data.frame(
w3 = estimates3["omega"],
a3 = estimates3["alpha1"],
b3 = estimates3["beta1"],
g3 = estimates3["gamma1"],
p1 = p_values3["omega"],
p2 = p_values3["alpha1"],
p3 = p_values3["beta1"],
p4 = p_values3["gamma1"]
)
write_latex("../results/results.tex", garch_gjr_df, append = TRUE, section_title = "GJR-GARCH(1,1) with zt ~ N(0,1)")
garch_gjr_t_df = data.frame(
w4 = estimates4["omega"],
a4 = estimates4["alpha1"],
b4 = estimates4["beta1"],
g4 = estimates4["gamma1"],
v4 = estimates4["shape"],
p1 = p_values4["omega"],
p2 = p_values4["alpha1"],
p3 = p_values4["beta1"],
p4 = p_values4["gamma1"],
p5 = p_values4["shape"]
)
write_latex("../results/results.tex", garch_gjr_t_df, append = TRUE, section_title = "GJR-GARCH(1,1) with zt ~ tv")
# c)  plotting NIC ----
# For GARCH(1,1) with zt ~ N(0,1)
w1 = estimates1["omega"]
a1 = estimates1["alpha1"]
b1 = estimates1["beta1"]
# For GARCH(1,1) with zt ~ tv
w2 = estimates2["omega"]
a2 = estimates2["alpha1"]
b1 = estimates2["beta1"]
v = estimates2["shape"]
# For GJR-GARCH(1,1) with zt ~ N(0,1)
w3 = estimates3["omega"]
a3 = estimates3["alpha1"]
b3 = estimates3["beta1"]
g3 = estimates3["gamma1"]
# For GJR-GARCH(1,1) with zt ~ tv
w4 = estimates4["omega"]
a4 = estimates4["alpha1"]
b4 = estimates4["beta1"]
g4 = estimates4["gamma1"]
v4 = estimates4["shape"]
# Unconditional variance from the first GARCH(1,1) model
ve1 = w1 / (1 - a1 - b1)
# NIC from tutorial ----
T = 500
e = seq(-5, 5, length.out = T)  # Grid of shocks epsilon
nicG1 = nicG2 = nicGJR1 = nicGJR2 = rep(0, T)  # Initialize NIC for each model
# Calculate NIC for each model
for (t in 1:T) {
nicG1[t] = w1 + b1 * ve1 + a1 * e[t]^2  # GARCH(1,1) with zt ~ N(0,1)
nicG2[t] = w2 + b1 * ve1 + a2 * e[t]^2  # GARCH(1,1) with zt ~ tv
if (e[t] > 0) {
nicGJR1[t] = w3 + b3 * ve1 + a3 * e[t]^2 # GJR-GARCH(1,1) with zt ~ N(0,1)
nicGJR2[t] = w4 + b4 * ve1 + a4 * e[t]^2 # GJR-GARCH(1,1) with zt ~ tv
}
else{
nicGJR1[t] = w3 + b3 * ve1 + (a3 + g3) * e[t]^2 # GJR-GARCH(1,1) with zt ~ N(0,1)
nicGJR2[t] = w4 + b4 * ve1 + (a4 + g4) * e[t]^2 # GJR-GARCH(1,1) with zt ~ tv
}
}
# Plot NIC for all four models
par(mfrow = c(1, 1))
plot(e, nicG1, type = "l", col = "blue", ylab = 'NIC', xlab = 'Shocks (e)', lwd = 2, lty = 1, main = "News Impact Curve")
lines(e, nicG2, type = "l", col = "red", lwd = 2, lty = 2)
lines(e, nicGJR1, type = "l", col = "green", lwd = 2, lty = 3)
lines(e, nicGJR2, type = "l", col = "purple", lwd = 2, lty = 4)
legend("top", legend = c("GARCH N(0,1)", "GARCH t_v", "GJR-GARCH N(0,1)", "GJR-GARCH t_v"), col = c("blue", "red", "green", "purple"), lty = 1:4, ncol = 1, lwd = 2)
# ==============================================================================
# FInancaial Economitrics Coursework
# ==============================================================================
#
# Author: 10710007
# Version: 13-03-2024
#
# ==============================================================================
rm(list = ls())
# Packages
library(lubridate)
library(forecast)
library(rugarch)
# Data
setwd("/home/oddish3/Documents/R_folder/MSc/FE/FE-coursework/code")
data = read.csv("../data/group_11.csv")
source("fineco_fun.R")
source("../utils/latex-macro.R")
figures_path <- "../docs/figures/"
# Script
# ==============================================================================
data$date = as.Date(data$date)
# plot(data$log.return, type = "l", col = "darkgreen")
# abline(h = 0, v = 250, col = "red")
# dev.off()
# ------------------------------------------
#           Practical Exercise
# ------------------------------------------
# Use the first 250 observations as an in-sample (estimation) period and the last 250 observations as out of sample forecasting
in_sample = as.matrix(data[1:250, 2])
out_sample = as.matrix(data[(251:nrow(data)), 2])
# a) investigating statistical properties of the in-sample data ----
# i) descriptive stats
a1_results = dstats(in_sample)
# ii-v) moment tests
a2_results = test_moment(in_sample)
# Assemble data for moments and test statistics into a dataframe
moment_test_df = data.frame(
# descriptive stats
amu = a1_results[1,1],
asigma = a1_results[2,1],
askew = a1_results[3,1],
akurt = a1_results[4,1],
# t stats
amut = a2_results[1,1],
askewt = a2_results[2,1],
akurtt = a2_results[3,1],
ajbt = a2_results[4,1],
# p vals
amup = a2_results[1,2],
askewp = a2_results[2,2],
akurtp = a2_results[3,2],
ajbp = a2_results[4,2]
)
# Appending the second section with its title
write_latex("../results/results.tex", moment_test_df, decimal_precision = 2, append = FALSE, section_title = "Moment Test and Descriptive Statistics")
# vi) lbq test
lbq1 = Box.test(in_sample, lag = 21, type = "Ljung-Box", fitdf = 0)
lbq2 = Box.test(in_sample^2, lag = 21, type = "Ljung-Box", fitdf = 0) # fitdf is the number of parameters estimated ???
lbq_df = data.frame(
aistat = lbq1$statistic,
aip = lbq1$p.value,
aiistat = lbq2$statistic,
aiip = lbq2$p.value
)
# Writing the first section with its title
write_latex("../results/results.tex", lbq_df, decimal_precision = 2, append = TRUE, section_title = "Ljung-Box Test Results")
# vii) Plot SACF and SPACF
# Open a PNG device for ACF and PACF plots
png(paste0(figures_path, "PACF.png"))
# Setting the plotting area to accommodate two plots side by side
par(mfrow = c(1, 2))
# Generate ACF and PACF plots
Acf(in_sample, lag.max = 25)
Pacf(in_sample, lag.max = 25)
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
# ==============================================================================
# FInancaial Economitrics Coursework
# ==============================================================================
#
# Author: 10710007
# Version: 13-03-2024
#
# ==============================================================================
rm(list = ls())
# Packages
library(lubridate)
library(forecast)
library(rugarch)
# Data
setwd("/home/oddish3/Documents/R_folder/MSc/FE/FE-coursework/code")
data = read.csv("../data/group_11.csv")
source("fineco_fun.R")
source("../utils/latex-macro.R")
figures_path <- "../docs/figures/"
# Script
# ==============================================================================
data$date = as.Date(data$date)
# plot(data$log.return, type = "l", col = "darkgreen")
# abline(h = 0, v = 250, col = "red")
# dev.off()
# ------------------------------------------
#           Practical Exercise
# ------------------------------------------
# Use the first 250 observations as an in-sample (estimation) period and the last 250 observations as out of sample forecasting
in_sample = as.matrix(data[1:250, 2])
out_sample = as.matrix(data[(251:nrow(data)), 2])
# a) investigating statistical properties of the in-sample data ----
# i) descriptive stats
a1_results = dstats(in_sample)
# ii-v) moment tests
a2_results = test_moment(in_sample)
# Assemble data for moments and test statistics into a dataframe
moment_test_df = data.frame(
# descriptive stats
amu = a1_results[1,1],
asigma = a1_results[2,1],
askew = a1_results[3,1],
akurt = a1_results[4,1],
# t stats
amut = a2_results[1,1],
askewt = a2_results[2,1],
akurtt = a2_results[3,1],
ajbt = a2_results[4,1],
# p vals
amup = a2_results[1,2],
askewp = a2_results[2,2],
akurtp = a2_results[3,2],
ajbp = a2_results[4,2]
)
# Appending the second section with its title
write_latex("../results/results.tex", moment_test_df, decimal_precision = 2, append = FALSE, section_title = "Moment Test and Descriptive Statistics")
# vi) lbq test
lbq1 = Box.test(in_sample, lag = 21, type = "Ljung-Box", fitdf = 0)
lbq2 = Box.test(in_sample^2, lag = 21, type = "Ljung-Box", fitdf = 0) # fitdf is the number of parameters estimated ???
lbq_df = data.frame(
aistat = lbq1$statistic,
aip = lbq1$p.value,
aiistat = lbq2$statistic,
aiip = lbq2$p.value
)
# Writing the first section with its title
write_latex("../results/results.tex", lbq_df, decimal_precision = 2, append = TRUE, section_title = "Ljung-Box Test Results")
# vii) Plot SACF and SPACF
# Open a PNG device for ACF and PACF plots
png(paste0(figures_path, "PACF.png"))
# Setting the plotting area to accommodate two plots side by side
par(mfrow = c(1, 2))
# Generate ACF and PACF plots
Acf(in_sample, lag.max = 25)
Pacf(in_sample, lag.max = 25)
# Close the plotting device for ACF/PACF
dev.off()
# Reset par settings to default for subsequent plots
par(mfrow = c(1, 1))
# Now, generate and save another plot separately if needed
png(paste0(figures_path, "log_return_plot.png"))
plot(data$log.return, type = "l", col = "darkgreen")
dev.off()
# b) estimating the conditional variance ----
# Assume that the conditional mean of the return series is constant: rt = c + εt , εt = σt zt . Define
#the residual series as et = rt − ĉ. Use the et series to estimate the following conditional variance
# i) GARCH(1,1) with zt ~ N(0,1)
spec1 =  ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE) ,distribution.model = "norm")
fit1 = ugarchfit(spec = spec1, data = data$log.return)
estimates1 = fit1@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values1 = fit1@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
# GARCH(1,1) with zt ~ tv
spec2 = ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std")  # 'std' for Student's t-distribution
fit2 = ugarchfit(spec = spec2, data = data$log.return)
estimates2 = fit2@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values2 = fit2@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
# ii) GJR-GARCH (1, 1) with zt ~ N(0,1)
spec3 = ugarchspec(
variance.model = list(model = "gjrGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
distribution.model = "norm" # Standard normal distribution for innovations
)
fit3 = ugarchfit(spec = spec3, data = data$log.return)
estimates3 = fit3@fit$robust.matcoef[,1]  # This extracts the "Estimate" column
p_values3 = fit3@fit$robust.matcoef[,4]  # This extracts the "Pr(>|t|)" column
estimates3
p_values3
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
lbq_z_norm$statistic
df_test
fit1
fit2
fit2
fit3
fit1
fit2
fit3
fit4
fit1
fit1
View(fit.g11)
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
source("~/Documents/R_folder/MSc/FE/FE-coursework/code/Script.R")
