#################################################################
#                         ECON60332                             #
#                       Problem Set 5                           #
#################################################################
setwd("~/Documents/R_folder/MSc/FE/PS5")
# This line removes all variables from the workspace.
rm(list = ls()) 
# import previously written functions
source("fineco_fun.R")
# and necessary libraries
library(forecast)

## (a) The data

#load the data
SP = read.csv('s&p_500_daily(1).csv',header = F)
#log-returns
sp = lr(SP$V2)
#visualize
plot(sp, type = "l", col = "darkgreen", ylab = 'S&P500 log-returns', xlab = '')

#descriptive statistics
dstats(as.matrix(sp))
test_moment(sp)
#ARCH-LM test
archlm(sp,21) 

### (b) Conditional mean
# estimating an ARMA(2,2)
fit = arima(sp, order=c(2,0,2), method="ML")
#residuals
resid = fit$residuals

# SACF and SPACF
par(mfrow = c(1, 2))
Acf(resid^2,lag.max = 25)
Pacf(resid^2,lag.max = 25)

#visualize
par(mfrow = c(1, 1))
plot(resid, type = "l", col = "darkred", ylab = 'ARMA(2,2) residuals', xlab = '')

# LBQ test
lbq = Box.test(resid^2, lag = 21, type = "Ljung-Box", fitdf = 2+2+2)
lbq$p.value

### (c) Conditional variance
library(rugarch)

#GARCH(1,1)
g11 = ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)), 
           mean.model = list(armaOrder = c(0, 0), include.mean = FALSE) ,distribution.model = "norm")

fit.g11 = ugarchfit(spec = g11, data = resid)
#parameter estimates
fit.g11@fit$robust.matcoef
# fitted conditional variance
sigma.g11 = fit.g11@fit$var
# standardized residuals
z.g11 = resid/sqrt(sigma.g11)
# standardized residuals' diagnostic
#descriptive statistics
dstats(as.matrix(z.g11))
test_moment(z.g11)
#ARCH-LM test
archlm(z.g11,21)
# SACF and SPACF
par(mfrow = c(1, 2))
Acf(z.g11^2,lag.max = 25)
Pacf(z.g11^2,lag.max = 25)

#TGARCH(1,1)
tg11 = ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)), 
                 mean.model = list(armaOrder = c(0, 0), include.mean = FALSE) ,distribution.model = "norm")

fit.tg11 = ugarchfit(spec = tg11, data = resid)
#parameter estimates
fit.tg11@fit$robust.matcoef
# fitted conditional variance
sigma.tg11 = fit.tg11@fit$var
# standardized residuals
z.tg11 = resid/sqrt(sigma.tg11)
# standardized residuals' diagnostic
#descriptive statistics
dstats(as.matrix(z.tg11))
test_moment(z.tg11)
#ARCH-LM test
archlm(z.tg11,21)
# SACF and SPACF
par(mfrow = c(1, 2))
Acf(z.tg11^2,lag.max = 25)
Pacf(z.tg11^2,lag.max = 25)


#EGARCH(1,1)
eg11 = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)), 
                 mean.model = list(armaOrder = c(0, 0), include.mean = FALSE) ,distribution.model = "norm")

fit.eg11 = ugarchfit(spec = eg11, data = resid)
#parameter estimates
fit.eg11@fit$robust.matcoef
# fitted conditional variance
sigma.eg11 = fit.eg11@fit$var
# standardized residuals
z.eg11 = resid/sqrt(sigma.eg11)
# standardized residuals' diagnostic
#descriptive statistics
dstats(as.matrix(z.eg11))
test_moment(z.eg11)
#ARCH-LM test
archlm(z.eg11,21)
# SACF and SPACF
par(mfrow = c(1, 2))
Acf(z.eg11^2,lag.max = 25)
Pacf(z.eg11^2,lag.max = 25)

### (d) Forecasting

H =10 # out-of-sample period
T = length(resid)-H


f1= matrix(0,H,1)
f2 = f1
f3 = f1
for (t in 1:H){
  window = resid[t:(T+t-1)]
  fit.g11 = ugarchfit(spec = g11, data = window, solver = 'hybrid')
  fit.tg11 = ugarchfit(spec = tg11, data = window, solver = 'hybrid')
  fit.eg11 = ugarchfit(spec = eg11, data = window, solver = 'hybrid')
  #GARCH(1,1) forecast
  xx= ugarchforecast(fit.g11, data = window, n.ahead = 1)
  f1[t] = xx@forecast$sigmaFor
  #TGARCH(1,1) forecast
  xx= ugarchforecast(fit.tg11, data = window, n.ahead = 1)
  f2[t] = xx@forecast$sigmaFor
  #EGARCH(1,1) forecast
  xx= ugarchforecast(fit.eg11, data = window, n.ahead = 1)
  f3[t] = xx@forecast$sigmaFor
  print(t)
}

# forecast errors
e1 = f1- resid[(T+1):(T+H)]^2
e2 = f2- resid[(T+1):(T+H)]^2
e3 = f3- resid[(T+1):(T+H)]^2

# RMSFE:
rmsfe = function(e){
  sse = sum(e^2)/length(e)
  r = sqrt(sse)
  return(r)
}
rmsfe(e1)
rmsfe(e2)
rmsfe(e3)

library(forecast)
dm.test(e1,e2,h=1)
dm.test(e1,e3,h=1)
