#################################################################
#                         ECON60332                             #
#                       Problem Set 4                           #
#################################################################
#simulating 


# This line removes all variables from the workspace.
rm(list = ls()) 
# import previously written functions
setwd("~/Documents/R_folder/MSc/FE/PS4")
source("fineco_fun.R")

########################################################################
# Problem 1
########################################################################
### (a)

sim_garch = function(p,q,T_u,par,seedn){
  burnin  = 500 # add the burnin
  T = T_u + burnin
  #Stage 1: Simulate GARCH innovations
  omega = par[4]
  alpha = par[5]
  beta = par[6] 
  set.seed(seedn)
  z = rnorm(T+p+q)
  e = matrix(0,T+p+q)
  # set a starting value
  e[1] = z[1]*omega/(1-alpha-beta)
  for (i in 2:(T+p+q)){
    sigma = sqrt(omega + alpha*e[i-1]^2+beta*(e[i-1]/z[i-1])^2)
    e[i] = sigma*z[i]
  }
  e = tail(e,T_u+p+q)
  #Stage 2: Simulate ARMA(p,q)
  c = par[1]
  theta = par[3]
  phi = par[2]
  y = matrix(0,T_u+p+q)
  # set starting values
  y[1:p] = e[1:p]
  for (t in 1:T_u){
    y0 = 0
    e0 = 0
    if (p>0){ y0 = y[t]}
    if (q>0){ e0 = e[t]}
    y[t+p] = phi*y0 + theta*e0+e[q+t]
  }
  # cut the starting values
  y = tail(y,T_u)
  e = tail(e,T_u)
  return(cbind(y,e))
}

### (b)
# input parameters necessary to simulate a function
c = 0
phi = 0.5
theta = 0.3
omega = 0.05
alpha = 0.1
beta = 0.85
#collect all parameters in one vector
par = c(c,phi, theta, omega, alpha,beta)

T = 10000
# simulate an ARMA(1,1)-GARCH(1,1) model
sim = sim_garch(1,0,T,par,42)
y = sim[,1]
e = sim[,2]

#analyse descriptive statistics
dstats(as.matrix(y))

# SACF ans SPACF plots
library(forecast)
par(mfrow = c(1, 2))
Acf(y,lag.max = 25)
Pacf(y,lag.max = 25)

#in roder to formally do 1 sided negative test, function does 2 sided test
# Test for normality - pnorm(-4.625), [1] 1.872992e-06
# test for kurtosis > 1-pnorm(24.8555), [1] 0
test_moment(y)


### (c)
#properties of the residuals
par(mfrow = c(1, 2))
Acf(e^2,lag.max = 25)
Pacf(e^2,lag.max = 25)
# SACF and SPACF of the squared 
# LBQ test
lbq = Box.test(e^2, lag = 21, type = "Ljung-Box", fitdf = 0)
LBQ = lbq$p.value

# ARCH-LM test by Engle: short function
archlm = function(e,lag){
  archlm = ar.ols(e^2, aic = F, order.max = lag, intercept = T)
  # save residuals
  eps = archlm$resid
  eps = na.omit(eps)
  # Conduct an LM test
  R2 = 1-sum(eps^2)/sum((e^2-mean(e^2))^2)
  LM = length(e)*R2
  lm_pvalue = 1-pchisq(LM,lag)
  return(lm_pvalue)
}
archlm(e,21)

### (d) - in tgarch a and g both negative in egarch negative positive?

# News Impact Curve

w = 0.05
a = 0.1
b=0.8
g=0.3
alpha=-0.2 #EGARCH
T = 500 #length of the series

nicG = matrix(0,T,1)
nicE = matrix(0,T,1)
nicT = matrix(0,T,1)

ve = w/(1-a-b) #unconditional variance of Y
e =seq(-5,5,length.out = T) #grid of shocks epsilon
for (t in 1:T){
  nicG[t]=w+b*ve + a*e[t]^2
  if (e[t]>0){
    nicE[t]=ve^(b)*exp(w-g*sqrt(2/pi))*exp((alpha+g)*e[t]/sqrt(ve))
    nicT[t]=w+b*ve + a*e[t]^2}
  else{
  nicE[t]=ve^(b)*exp(w-g*sqrt(2/pi))*exp((alpha-g)*e[t]/sqrt(ve))
  nicT[t]=w+b*ve + (a+g)*e[t]^2}
}

par(mfrow = c(1, 1))
plot(e,nicG,type = "l", col = "darkgreen", ylab = 'NIC', xlab = 'e',lwd = 3,lty = 1, main = "News Impact Curve")
lines(e,nicE,type = "l", col = "darkblue", lwd = 3,lty = 2)
lines(e,nicT,type = "l", col = "darkred", lwd = 5,lty = 3)
legend(-5,1,legend=c("GARCH","EGARCH","TGARCH"), col=c("darkgreen","darkblue","darkred"),
      lty=c(1,2,3), ncol=1,lwd = 3)
